#! /bin/sh

#This script below is it's own documentation just do:
#grep "#DOC: " update_heavyforwarder | sed 's/[ \t]*#DOC://'
#and you get the readable documentation.

#Variable definitions
snmp360trapsFunctionsVersion='20240210' 
AUTORS='Jiri Kindl, j.kindl@accenture'
#See version history at the end of script

###############################################################################
#                                                                             #
#    BACKUP FUNCTIONS                                                         #
#                                                                             #
###############################################################################

#DOC: backupFile FILE
#DOC:    The function takes one argument, which is the path to the file to be backed up. 
#DOC:    It generates a timestamp using the `date` command and appends it to the filename 
#DOC:    to create a unique backup filename. Then, it uses the `cp` command to copy the 
#DOC:    original file to the backup file.
#DOC: 
#DOC:   FILE: The path to the file to be backed up.
#DOC:     Example:
#DOC:       backupFile /path/to/myfile.txt
#DOC:       This will create a backup of /path/to/myfile.txt with a filename like
#DOC:       /path/to/myfile.txt_20220101_120000 (assuming the current date and time is
#DOC:       January 1st, 2022 at 12:00:00).
backupFile() {
  local file2backup=$1
  local backupfile
  local timestamp=$(date +%Y%m%d_%H%M%S)
  backupfile="${file2backup}_${timestamp}"
  cp $file2backup $backupfile
}

#DOC: bakupEDCConfigs
#DOC:   Backup EDC configuration
bakupEDCConfigs() {
  backupFile $SNMP_EDC_DIR/local/inputs.conf
  log "BACKUP: $SNMP_EDC_DIR/local/inputs.conf"
  backupFile $SNMP_EDC_DIR/local/props.conf
  log "BACKUP: $SNMP_EDC_DIR/local/props.conf"
  backupFile $SNMP_EDC_DIR/local/transforms.conf
  log "BACKUP: $SNMP_EDC_DIR/local/transforms.conf"
}

#DOC: backupSHConfigs
#DOC:   Backup SH configuration
backupSHConfigs(){
  # List of files to backup
  files_to_backup=("local/macros.conf" "local/savedsearches.conf" "local/transforms.conf" "metadata/local.meta")

  # Iterate over the list and backup each file
  for file in "${files_to_backup[@]}"; do
    if [[ -f "$APP_SH_DIR/$file" ]]; then
      backupFile "$APP_SH_DIR/$file"
      log "BACKUP: $APP_SH_DIR/$file"
    fi
  done
}

#DOC: backupDATAConfigs
#DOC:   Backup DATA configuration
backupDATAConfigs() {
  # List of files to backup
  files_to_backup=("local/props.conf" "metadata/local.meta")

  # Iterate over the list and backup each file
  for file in "${files_to_backup[@]}"; do
    if [[ -f "$APP_DATA_DIR/$file" ]]; then
      backupFile "$APP_DATA_DIR/$file"
      log "BACKUP: $APP_DATA_DIR/$file"
    fi
  done
}

###############################################################################
#                                                                             #
#    LOGGING FUNCTIONS                                                        #
#                                                                             #
###############################################################################

#DOC: log
#DOC:   printout log and write it in file
#DOC:

log() {
  now=$(date +%Y-%m-%d_%H:%M:%S_%z)
  message=$1
  echo "$now;;$(hostname);;$1" |tee -a $install_log
}

addToDoManually() {
  echo $1 >> $tmpTodo
}

printDebug() {
  now=$(date +%Y-%m-%d_%H:%M:%S_%z)
  message=$1
  if [ $DEBUG = 'TRUE' ]
  then
    echo "$now;;$(hostname);; DEBUG: $message"
  fi
}


###############################################################################
#                                                                             #
#    SNMP360TRAPS DATACOLLECTOR RELATED FUNCTIONS                             #
#                                                                             #
###############################################################################

#DOC: getSnmpEdcDir
#DOC:   NAME
#DOC:     getSnmpEdcDir - get the directory of the SNMP Traps Data Collector
#DOC:   SYNOPSIS
#DOC:     getSnmpEdcDir
#DOC:   DESCRIPTION
#DOC:     This function retrieves the directory of the SNMP Traps Data Collector in the Splunk apps directory.
#DOC:     It checks if the SPLUNK_HOME environment variable is set.
#DOC:     If it is not set, it displays an error message and returns with code 33.
#DOC:     It checks if there is exactly one SNMP Traps Data Collector in the Splunk apps directory.
#DOC:     If there is exactly one, it assigns its value to the local variable snmp360traps_edc_dir.
#DOC:     If there is more than one, it prompts the user to choose one from a list and assigns its value to the local variable snmp360traps_edc_dir.
#DOC:     If there is none, it displays an error message and returns with code 11.
#DOC:     It then echoes the value of snmp360traps_edc_dir.
#DOC: 
getSnmpEdcDir() {
  # Check if SPLUNK_HOME environment variable is set
  if [ -z "$SPLUNK_HOME" ]
  then
    # Display error message and return with code 33 if SPLUNK_HOME is not set
    echo "ERROR: SPLUNK_HOME environment variable is not set" >&2
    return 33
  fi

  # Initialize local variable snmp360traps_edc_dir to store the directory of the SNMP Traps Data Collector
  local snmp360traps_edc_dir=''

  # Check if there is exactly one SNMP Traps Data Collector in the Splunk apps directory
   if [ $(ls $SPLUNK_HOME/etc/apps | grep -E "*snmp-traps_edc*" | wc -l) -eq 1 ]
   then
     # Assign the value of the SNMP Traps Data Collector directory to snmp360traps_edc_dir
     snmp360traps_edc_dir=$(ls $SPLUNK_HOME/etc/apps | grep -E "*snmp-traps_edc*")
   else
     # Check if there is more than one SNMP Traps Data Collector in the Splunk apps directory
     if [ $(ls $SPLUNK_HOME/etc/apps | grep -E "*snmp-traps_edc*"|wc -l) -gt 1 ]
     then
       # Display a list of available SNMP Traps Data Collectors and prompt the user to choose one
       echo "There is more then one SNMP Traps Data Colletor:"
       ls $SPLUNK_HOME/etc/apps | grep -E "*snmp-traps_edc*"
       echo "Enter the the one you want update from list above:"
       read snmp360traps_edc_dir

       # Check if the chosen SNMP Traps Data Collector exists in the Splunk apps directory
       if [ ! -e $SPLUNK_HOME/etc/apps/$snmp360traps_edc_dir ]
       then
         # Display error message and return with code 22 if chosen SNMP Traps Data Collector does not exist
         echo "ERROR: $SPLUNK_HOME/etc/apps/$snmp360traps_edc_dir doesn't exist" >&2
         return 22
       fi
     else
       # Display error message and return with code 11 if there are no SNMP Traps Data Collectors in the Splunk apps directory
       echo "ERROR: There is no SNMP Traps Data Collector in  $SPLUNK_HOME/etc/apps" >&2
       return 11
     fi
   fi

   # Echo the value of snmp360traps_edc_dir to display the directory of the chosen SNMP Traps Data Collector
   echo "$SPLUNK_HOME/etc/apps/$snmp360traps_edc_dir"
}

#DOC: addSNMPMIBs
#DOC:   Copy all MIBs to /usr/share/snmp/mibs, handling multiple MIBs with the same module name
#DOC:   For each MIB in the integration folder:
#DOC:     If there's an existing MIB with the same module name:
#DOC:       If the contents of the files are identical, delete the old file
#DOC:       If the contents are different, back up the old file to ./older_mibs_backup
#DOC:     Copy the new MIB file to /usr/share/snmp/mibs
#DOC: 
addSNMPMIBs() {
  local integration_folder=$1
  local tmp_file=$(mktemp)
  local mib_file
  local mib_module
  local backup_dir="./older_mibs_backup"

  # Create the backup directory if it doesn't exist
  mkdir -p "$backup_dir"

  # List all MIB modules and save it to a temporary file
  listSNMPMIBModules > "$tmp_file"

  # Iterate over each MIB file in the integration folder
  for mib_file in $(ls ./${integration_folder}/MIBS/*.mib)
  do
    # Get the MIB module name of the current MIB file
    mib_module=$(getSNMPMIBModuleName "$mib_file")

    # Check if there's an existing MIB file with the same module name
    if grep -q "^$mib_module:" "$tmp_file"; then
      # Get the path of the existing MIB file
      local existing_mib_file=$(grep "^$mib_module:" "$tmp_file" | cut -d: -f2)

      # If the contents of the files are identical, delete the old file
      if cmp -s "$mib_file" "$existing_mib_file"; then
        rm "$existing_mib_file"
      else
        echo "Backing up older MIB file: $existing_mib_file"
        mv "$existing_mib_file" "$backup_dir"
      fi
      cp "$mib_file" $MIBS_DIR
    else
      # If there's no existing MIB file with the same module name, just copy the new one
      cp "$mib_file" $MIBS_DIR
    fi
  done

  # Clean up the temporary file
  rm -f "$tmp_file"
}


#DOC: splunkAddTransforms
#DOC:   NAME
#DOC:     splunkAddTransforms - update and add transforms to Splunk
#DOC:   SYNOPSIS
#DOC:     splunkAddTransforms -t TRANSFORMS_FILE [-i SNMP360TRAPS_T1_INDEX] -d SNMP360TRAPS_EDC_DIR
#DOC:   DESCRIPTION
#DOC:     This function takes two required options and one optional option:
#DOC:       -t TRANSFORMS_FILE - specifies the path to the transforms.txt file.
#DOC:       -i SNMP360TRAPS_T1_INDEX - (optional) specifies the value of the snmp360traps_t1_index variable.
#DOC:       -d SNMP360TRAPS_EDC_DIR - specifies the value of the snmp360traps_edc_dir variable.
#DOC:     The function checks if TRANSFORMS_FILE exists and is readable. If it does not exist or is not readable, an error message is displayed.
#DOC:     The function updates the target index based on the tenant defined in $snmp_edc_dir using sed when writing to $transforms_file.
#DOC:     The function checks if $snmp_edc_dir/local/transforms.conf exists and is writable or can be created by copying from default directory. If it does not exist or is not writable, an error message is displayed.
#DOC:     It then appends the content of TRANSFORMS_FILE to $snmp_edc_dir/local/transforms.conf.
#DOC:     The tr command is used to remove non-printable ASCII characters and Windows end-of-line characters.
#DOC: 
splunkAddTransforms() {
  # Initialize local variables to store option values
  local tf=''
  local snmp360traps_t1_index='acn_infra360snmp_traps_tier1_idx'
  local snmp360traps_edc_dir=''
  local usage="Usage: splunkAddTransforms -t TRANSFORMS_FILE [-i SNMP360TRAPS_T1_INDEX] -d SNMP360TRAPS_EDC_DIR"

  # Parse options using while, case, and shift
  while [ $# -gt 0 ]
  do
    case "$1" in
      -t)
        tf=$2
        shift 2
        ;;
      -i)
        snmp360traps_t1_index=$2
        shift 2
        ;;
      -d)
        snmp360traps_edc_dir=$2
        shift 2
        ;;
      *)
        echo "ERROR: Invalid option $1" >&2
        echo "$usage" >&2
        return 1
        ;;
    esac
  done

  # Check if required options are provided
  if [ -z "$tf" ] || [ -z "$snmp360traps_edc_dir" ]
  then
    echo "ERROR: Missing required options" >&2
    echo "$usage" >&2
    return 1
  fi

  # Check if TRANSFORMS_FILE exists and is readable
  if [ ! -e "$tf" ]
  then
    echo "ERROR: TRANSFORMS_FILE $tf does not exist" >&2
    echo "$usage" >&2
    return 2
  elif [ ! -r "$tf" ]
  then
    echo "ERROR: TRANSFORMS_FILE $tf is not readable" >&2
    echo "$usage" >&2
    return 3
  fi

  # Normalize snmp360traps_edc_dir by removing duplicate slashes and replacing /default/local/ with /local/
  local transforms_file=$(echo "${snmp360traps_edc_dir}/local/transforms.conf" | sed 's://:/:g' | sed 's:/default/local/:/local/:g' | sed 's:/local/local/:/local/:g')

  # Check if snmp360traps_edc_dir/local/transforms.conf exists and is writable or can be created by copying from default directory 
  if [ ! -e "$transforms_file" ]
  then 
    local default_transforms_file=$(echo "${snmp360traps_edc_dir}/default/transforms.conf" | sed 's://:/:g' | sed 's:/default/default/:/default/:g')
    if [ ! -e "$snmp360traps_edc_dir" ]
    then 
      echo "ERROR: $snmp360traps_edc_dir does not exist please install data collector first" >&2 
      echo "$usage" >&2
      return 4 
    elif [ ! -e "$default_transforms_file" ]
    then 
      echo "ERROR: $default_transforms_file does not exist please install data collector first" >&2 
      echo "$usage" >&2
      return 5 
    elif [ ! -w "$(dirname "$transforms_file")" ]
    then 
      echo "ERROR: $(dirname "$transforms_file") is not writable" >&2 
      echo "$usage" >&2
      return 6 
    else 
      cp "$default_transforms_file" "$transforms_file"
    fi 
  elif [ ! -w "$transforms_file" ]
  then 
    echo "ERROR: $transforms_file is not writable" >&2 
    echo "$usage" >&2
    return 7 
  fi 

  # Append content of TRANSFORMS_FILE to $snmp_edc_dir/local/transforms.conf
  cat $tf | sed "s/acn_infra360snmp_traps_tier1_idx/$snmp360traps_t1_index/" | tr -cd '\040-\176,\012' >> $transforms_file
}

#DOC: updateSNMPPropsSTTransforms
#DOC:   NAME
#DOC:     updateSNMPPropsSTTransforms - Update sourcetype transforms
#DOC:   SYNOPSIS
#DOC:     updateSNMPPropsSTTransforms [-t TRANSFORMS_FILE] [-p PROPS_FILE] [PROPS_FILE TRANSFORMS_FILE]
#DOC:   DESCRIPTION
#DOC:     This function takes two required arguments, either as positional arguments or as options:
#DOC:       -t TRANSFORMS_FILE - specifies the path to the transforms.conf file.
#DOC:       -p PROPS_FILE - specifies the path to the props.conf file.
#DOC:     The function checks if TRANSFORMS_FILE exists and is readable. If it does not exist or is not readable, an error message is displayed.
#DOC:     The function searches all sourcetype stanzas in TRANSFORMS_FILE, generates and updates the TRANSFORMS-sourcetype line in PROPS_FILE.
#DOC:     The function checks if PROPS_FILE exists and is writable. If it does not exist or is not writable, an error message is displayed.
#DOC: 
updateSNMPPropsSTTransforms() {
  local usage="Usage: updateSNMPPropsSTTransforms [-t TRANSFORMS_FILE] [-p PROPS_FILE] [PROPS_FILE TRANSFORMS_FILE]"

  local props_file
  local transforms_file

  while [ $# -gt 0 ]; do
    case $1 in
      -t) transforms_file=$2; shift 2 ;;
      -p) props_file=$2; shift 2 ;;
      --) shift; break ;;
      *)
        if [ -z "$props_file" ]; then
          props_file=$1
        elif [ -z "$transforms_file" ]; then
          transforms_file=$1
        else
          echo "Error: Too many arguments." >&2
          echo "$usage" >&2
          return 1
        fi
        shift ;;
    esac
  done

  if [ -z "$props_file" ] || [ -z "$transforms_file" ]; then
    echo "Error: Both arguments are required." >&2
    echo "$usage" >&2
    return 1
  fi

  if [ ! -e "$transforms_file" ]; then
    echo "Error: Transforms file '$transforms_file' does not exist." >&2
    echo "$usage" >&2
    return 2
  fi

  if [ ! -r "$transforms_file" ]; then
    echo "Error: Transforms file '$transforms_file' is not readable." >&2
    echo "$usage" >&2
    return 3
  fi

  if [ ! -e "$props_file" ]; then
    echo "Error: Props file '$props_file' does not exist." >&2
    echo "$usage" >&2
    return 4
  fi

  if [ ! -w "$props_file" ]; then
    echo "Error: Props file '$props_file' is not writable." >&2
    echo "$usage" >&2
    return 5
  fi

  if ! grep -q 'sourcetype]' "$transforms_file"; then
    echo "Error: No sourcetype stanzas found in transforms file '$transforms_file'." >&2
    echo "$usage" >&2
    return 6
  fi

  if ! grep -q 'TRANSFORMS-sourcetype' "$props_file"; then
    echo "Error: No TRANSFORMS-sourcetype line found in props file '$props_file'." >&2
    echo "$usage" >&2
    return 7
  fi

  st_transforms=$(for st in $(grep 'sourcetype]' $transforms_file); do echo -n "$st,"|tr '\[' ' '|tr '\]' ' '|sed -e 's/ //g'; done; echo)
  st_transforms=$(echo $st_transforms | sed -e 's/unknown_traps_sourcetype//g' | sed -e 's/default_sourcetype//g'|sed -e 's/splunk_selfmonitoring_sourcetype//g' | sed -e 's/,\+/,/g' | sed -e 's/,$//' )
  st_transforms="default_sourcetype,$st_transforms,unknown_traps_sourcetype,splunk_selfmonitoring_sourcetype"
  sed -ie "s/TRANSFORMS-sourcetype \+= .*/TRANSFORMS-sourcetype = ${st_transforms}/" $props_file
}

#DOC: updateSNMPPropsIDXTransforms
#DOC:   NAME
#DOC:     updateSNMPPropsIDXTransforms - Update index transforms
#DOC:   SYNOPSIS
#DOC:     updateSNMPPropsIDXTransforms [-t TRANSFORMS_FILE] [-p PROPS_FILE] [PROPS_FILE TRANSFORMS_FILE]
#DOC:   DESCRIPTION
#DOC:     This function takes two required arguments, either as positional arguments or as options:
#DOC:       -t TRANSFORMS_FILE - specifies the path to the transforms.conf file.
#DOC:       -p PROPS_FILE - specifies the path to the props.conf file.
#DOC:     The function checks if TRANSFORMS_FILE exists and is readable. If it does not exist or is not readable, an error message is displayed.
#DOC:     The function searches all index stanzas in TRANSFORMS_FILE, generates and updates the TRANSFORMS-index line in PROPS_FILE.
#DOC:     The function checks if PROPS_FILE exists and is writable. If it does not exist or is not writable, an error message is displayed.
#DOC: 
updateSNMPPropsIDXTransforms() {
  local usage="Usage: updateSNMPPropsIDXTransforms [-t TRANSFORMS_FILE] [-p PROPS_FILE] [PROPS_FILE TRANSFORMS_FILE]"

  local props_file
  local transforms_file

  while [ $# -gt 0 ]; do
    case $1 in
      -t) transforms_file=$2; shift 2 ;;
      -p) props_file=$2; shift 2 ;;
      --) shift; break ;;
      *)
        if [ -z "$props_file" ]; then
          props_file=$1
        elif [ -z "$transforms_file" ]; then
          transforms_file=$1
        else
          echo "Error: Too many arguments." >&2
          echo "$usage" >&2
          return 1
        fi
        shift ;;
    esac
  done

  if [ -z "$props_file" ] || [ -z "$transforms_file" ]; then
    echo "Error: Both arguments are required." >&2
    echo "$usage" >&2
    return 1
  fi

  if [ ! -e "$transforms_file" ]; then
    echo "Error: Transforms file '$transforms_file' does not exist." >&2
    echo "$usage" >&2
    return 2
  fi

  if [ ! -r "$transforms_file" ]; then
    echo "Error: Transforms file '$transforms_file' is not readable." >&2
    echo "$usage" >&2
    return 3
  fi

  if [ ! -e "$props_file" ]; then
    echo "Error: Props file '$props_file' does not exist." >&2
    echo "$usage" >&2
    return 4
  fi

  if [ ! -w "$props_file" ]; then
    echo "Error: Props file '$props_file' is not writable." >&2
    echo "$usage" >&2
    return 5
  fi

  if ! grep -q 'index]' "$transforms_file"; then
    echo "Error: No index stanzas found in transforms file '$transforms_file'." >&2
    echo "$usage" >&2
    return 6
  fi

  if ! grep -q 'TRANSFORMS-index' "$props_file"; then
    echo "Error: No TRANSFORMS-index line found in props file '$props_file'." >&2
    echo "$usage" >&2
    return 7
  fi

  idx_transforms=$(for idx in $(grep 'index]' $transforms_file); do echo -n "$idx,"|tr '\[' ' '|tr '\]' ' '|sed -e 's/ //g'; done; echo)
  idx_transforms=$(echo $idx_transforms |sed -e 's/unknown_traps_index//g' | sed -e 's/default_index//g' | sed -e 's/splunk_selfmonitoring_index//g' | sed -e 's/,\+/,/g' |sed -e 's/,$//')
  idx_transforms="default_index,$idx_transforms,unknown_traps_index,splunk_selfmonitoring_index"
  sed -ie "s/TRANSFORMS-index \+= .*/TRANSFORMS-index = ${idx_transforms}/" $props_file
  
}

#DOC: updateSNMPInputs
#DOC:   append content of any inputs.txt in any */HeavyForwarder/inputs.txt to */HeavyForwarder/inputs.txt
#DOC:   using tr is there to remove non printable ascii characters and windows end of the lines
#DOC:
updateSNMPInputs() {
  local integration_folder=$1
  local inputFile="${integration_folder}/HeavyForwarder/inputs.txt"
  log "  Adding inputs: $inputFile"
  echo "" >> $SNMP_EDC_DIR/local/inputs.conf
  cat $inputFile | tr -cd '\040-\176,\012' >> $SNMP_EDC_DIR/local/inputs.conf
}

#DOC: updateSNMPBinAndConfig
#DOC:   copy bin and config from any folder to $SNMP_EDC_DIR
#DOC: 
updateSNMPBinAndConfig() {
  local integration_folder=$1
  cp -R ./${integration_folder}/HeavyForwarder/bin $SNMP_EDC_DIR 2>/dev/null
  cp -R ./${integration_folder}/HeavyForwarder/config/ $SNMP_EDC_DIR 2>/dev/null
  chmod +x $SNMP_EDC_DIR/bin/script/*.sh 2>/dev/null
}

###############################################################################
#                                                                             #
#    SNMP360TRAPS CHECK FUNCTIONS                                             #
#                                                                             #
###############################################################################

# Define the function to check if the integration is a directory and contains all required subdirectories
checkSNMPIntegration() {
    # $1 is the integration to check
    local integration=$1
    if [ ! -d "$integration" ]; then
        echo "Error: $integration is not a directory" >&2
        return 1
    fi

    for subdirectory in HeavyForwarder MIBS SearchHead; do
        if [ ! -d "$integration/$subdirectory" ]; then
            echo "Error: $subdirectory does not exist in $1" >&2
            return 1
        fi
    done

    if [ -f "$1/MIBS/README.txt" -a $(ls $1/MIBS/*.mib 2>/dev/null | wc -l) -eq 0 ]; then
        echo "README.txt found in $integration/MIBs. Contents:"
        cat "$integration/MIBS/README.txt"
        return 1
    fi

    return 0
}